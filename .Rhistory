3+4
install.packages("tinytex
")
install.packages("tinytex")
library(ncvreg)
ncvreg
install.packages("hrqglas")
library(hrqglas)
rm(list=ls(all=TRUE))
library(devtools)
devtools::unload("rqPen")
install_github("bssherwood/rqpen")
library(rqPen)
set.seed(1)
x <- matrix(rnorm(25*30,sd=10),ncol=30)
y <- 1 + x[,1] + 3*x[,3] - x[,8] + rt(25,3)
g <- rep(seq(1:5),6)
tvals <- c(.25,.75)
#run examples
r1 <- rq.group.pen(x,y,groups=g)
r5 <- rq.group.pen(x,y,groups=g,tau=tvals)
sessionInfo()
rm(list=ls(all=TRUE))
library(devtools)
devtools::unload("rqPen")
install_github("bssherwood/rqpen")
3
library(rqPen)
set.seed(1)
x <- matrix(rnorm(25*30,sd=10),ncol=30)
y <- 1 + x[,1] + 3*x[,3] - x[,8] + rt(25,3)
g <- rep(seq(1:5),6)
tvals <- c(.25,.75)
#run examples
r1 <- rq.group.pen(x,y,groups=g)
r5 <- rq.group.pen(x,y,groups=g,tau=tvals)
setwd("C:/Users/b157s966/Dropbox/My PC (BUSN-1XWNDC2)/Documents/RPackage/rqpen")
load_all()
library(devtools)
load_all()
library(rqPen)
#quantreg is required for rqPen, but call directly here
#because we need the barro data set
library(quantreg)
data(barro)
y <- barro$y.net
x <- barro[,-1]
qbr <- rq.pen(x,y,alg="br")
qfn <- rq.pen(x,y,alg="fn")
tvals <- seq(.1,.9,.1)
rqmt <- rq.pen(x,y,tau=tvals)
#default is to find the optimal value of
# lambda for each quantile separately
rqmt_st <- qic.select(rqmt)
# alternative option is to find one value of
# lambda best for all tau. Below code
# also provides different weights for the models
rqmt_g <- qic.select(rqmt,septau = FALSE,weights=sqrt(tvals*(1-tvals)))
# first one will have different values of lambda for each quantile
# second approach will provide the same value for lambda for all quantiles
rqmt_st$modelsInfo
rqmt_g$modelsInfo
#below command gets coefficients for the selected model optimized for each quantile
coefficients(rqmt_st)
#code is the same for a group penalty
# This is not a great use of a group penalty and only for
# example
g <- c(rep(1,4),rep(2,3),rep(3,3),rep(4,3))
rgroup <- rq.group.pen(x,y,groups=g,tau=seq(.1,.9.,1))
rq.group.pen(x,y,groups =g,tau=seq(.1,.9,.1))
rq.group.pen(x,y)
debug(rq.group.pen)
rq.group.pen(x,y)
undebug(rq.group.pen)
debug(rq.glasso)
rq.group.pen(x,y)
subtau
tau
nt
penf
debug(hrq_glasso)
sessionInfo()
rq.group.pen(x,y)
undebug(hrq_glasso)
help(hrq_glasso)
n<- 100
p<- 10
x0<- matrix(rnorm(n*p),n,p)
X<- cbind(x0, x0^2, x0^3)[,order(rep(1:p,3))]
y<- -2+X[,1]+0.5*X[,2]-X[,3]-0.5*X[,7]+X[,8]-0.2*X[,9]+rt(n,2)
group<- rep(1:p, each=3)
fit<- hrq_glasso(X, y, group)
rq.group.pen(x,y,groups =g,tau=seq(.1,.9,.1))
rq.group.pen(x,y,groups =g,tau=seq(.1,.9,.1))
head(rq.group.pen)
g
rq.group.pen(x,y,groups =g,tau=seq(.1,.9,.1))
undebug(rq.glasso)
undebug(hrq_glasso)
rq.group.pen(x,y,groups =g,tau=seq(.1,.9,.1))
head(rq.group.pen)
warnings()
debug(rq.group.pen)
undebug(rq.group.pen)
rq.group.pen(x,y,tau=seq(.1,.9,.1),groups =g)
debug(rq.group.pen)
rq.group.pen(x,y,tau=seq(.1,.9,.1),groups =g)
debug(rqPen:::getLamMaxGroup)
rq.group.pen(x,y,tau=seq(.1,.9,.1),groups =g)
validSpots
group.pen.factor
gamma0
neg.gradient
neg.gradient(r,rep(1,n),tau_val,gamma=gamma0,x,approx="huber")
neg.gradient(r,rep(1,n),tau_val,gamma=gamma0,x,apprx="huber")
neg.gradient
wt_deriv
debug(neg.gradient)
wt_deriv
length(wt_deriv)
x
hrqglas:::neg.gradient()
hrqglas:::neg.gradient
rq.group.pen(x,y,tau=seq(.1,.9,.1),groups =g)
debug(neg.gradient)
dim(x)
length(wt_deriv)
hrqglas:::neg.gradient()
hrqglas:::neg.gradient
debug(hrqglas:::neg.gradient)
help(hrq_glasso)
n<- 100
p<- 10
x0<- matrix(rnorm(n*p),n,p)
X<- cbind(x0, x0^2, x0^3)[,order(rep(1:p,3))]
y<- -2+X[,1]+0.5*X[,2]-X[,3]-0.5*X[,7]+X[,8]-0.2*X[,9]+rt(n,2)
group<- rep(1:p, each=3)
fit<- hrq_glasso(X, y, group)
wt_deriv
length(wt_deriv)
dim(x)
undebug(hrqglas:::neg.gradient)
debug(hrqglas:::neg.gradient)
n<- 100
p<- 10
x0<- matrix(rnorm(n*p),n,p)
X<- cbind(x0, x0^2, x0^3)[,order(rep(1:p,3))]
y<- -2+X[,1]+0.5*X[,2]-X[,3]-0.5*X[,7]+X[,8]-0.2*X[,9]+rt(n,2)
group<- rep(1:p, each=3)
fit<- hrq_glasso(X, y, group)
length(r)
dim(x)
debug(rqPen:::neg.gradient)
help(rq.glasso)
help(rq.group.pen)
set.seed(1)
x <- matrix(rnorm(25*30,sd=10),ncol=30)
y <- 1 + x[,1] + 3*x[,3] - x[,8] + rt(25,3)
g <- rep(seq(1:5),6)
tvals <- c(.25,.75)
r1 <- rq.group.pen(x,y,groups=g)
\
debug(getLamMaxGroup)
lenght(y)
length(y)
dim(x)
length(wt_deriv)
blah <- apply(x*wt_deriv,2,mean)
blah
length(blah)
grad_k.norm
