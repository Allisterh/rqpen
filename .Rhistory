library(rqPen)
qic
help(qic)
help(rq.pen)
n <- 100
p <- 8
x <- matrix(runif(n*p),ncol=p)
y <- 1 + x[,1] + x[,8] + (1+.5*x[,3])*rnorm(100)
r1 <- rq.pen(x,y)
residuals <- predict(r1,x)
residuals <- y-predict(r1,x)
blah <- predict(r1,x)
class(blah)
blah[[1]]
class(blah)
length(blah)
errs <- y - blah[[1]]
errs
apply(abs(errs),2,mean)
r1$rho
attributes(r1)
r1$models[[1]]$rho
apply(abs(errs),2,mean)
apply(abs(errs),2,mean)/2
help(qic)
help(qic.select)
head(qic.select)
help(qic.select)
library(rqPen)
#quantreg is required for rqPen, but call directly here
#because we need the barro data set
library(quantreg)
data(barro)
y <- barro$y.net
x <- barro[,-1]
qbr <- rq.pen(x,y,alg="br")
qfn <- rq.pen(x,y,alg="fn")
rqe <- rq.pen(x,y,tau=.25,penalty="ENet",a=seq(0,.1,1))
aicm <- qic.select(rqe, method="AIC")
#BIC is the default method
bicm <- qic.select(rqe)
aicm
bicm
attributes(aicm)
aicm$gic
aicm$ic
which.min(aicm$ic)
rqe
attributes(rqe)
rqe$a
rqe <- rq.pen(x,y,tau=.25,penalty="ENet",a=seq(0,.1,.1))
aicm <- qic.select(rqe, method="AIC")
#BIC is the default method
bicm <- qic.select(rqe)
rqe
rqe <- rq.pen(x,y,tau=.25,penalty="ENet",a=seq(0,1,.1))
aicm <- qic.select(rqe, method="AIC")
#BIC is the default method
bicm <- qic.select(rqe)
rqe
bicm
aicm
attributes(aicm)
aicm$ic
aicm$modelsInfo
bicm$modelsInfo
aicm
bicm
coefficients(aicm)
coefficients(aicm)[[1]]
debug(qic.select)
qic.select()
library(rqPen)
#quantreg is required for rqPen, but call directly here
#because we need the barro data set
library(quantreg)
data(barro)
y <- barro$y.net
x <- barro[,-1]
qbr <- rq.pen(x,y,alg="br")
qfn <- rq.pen(x,y,alg="fn")
rqe <- rq.pen(x,y,tau=.25,penalty="ENet",a=seq(0,1,.1))
aicm <- qic.select(rqe, method="AIC")
rqe
qic.select(rqe,method="AIC")
qic_vals
minQIC
lambdaIndex
modelsInfo
modelsInfo
coefs
gic
modelsInfo
library(devtools)
roxygen2::roxygenise()
setwd("C:/Users/b157s966/Dropbox/My PC (BUSN-1XWNDC2)/Documents/RPackage/rqpen")
roxygen2::roxygenise()
load_all()
qic.select
rqe <- rq.pen(x,y,tau=.25,penalty="ENet",a=seq(0,1,.1))
aicm <- qic.select(rqe, method="AIC")
aicm
aicm
aicm
aicm
attributes(aicm)
aicm$modelsInfo
x
a <- rnorm(100)
b <- rnorm(100)
k <- rnorm(100)
data.table(a,b,k0)
data.table(a,b,k)
data.table(a,b,krazy=k)
roxygen2::roxygenise()\
roxygen2::roxygenise()
load_all()
coefficients(bicm)
library(quantreg)
r1 <- rq(y~x)
x
dim(x)
r1 <- rq(y~x)
class(x)
head(barro)
r1 <- rq(y.net~.,barro)
r1 <- rq(y.net~lgdp2+mse2+fse2,barro)
r1 <- rq(y.net~lgdp2+mse2+fse2,data=barro)
r1 <- rq(y.net~.,data=barro)
r1
r1 <- rq(y.net~.,data=barro,tau=c(.1,.5,.7))
r1
coefficients(r1)
aicm
do.call(rbind,coefficients(aicm))
class( coefficients(r1))
re
l()
ls()
rqe$tau
r1 <- rq(y.net~.,data=barro,tau=c(.1,.5,.7))
a <- seq(.1,.9,.1)
a
paste("tau=",a)
roxygen2::roxygenise()
load_all()
rqe <- rq.pen(x,y,tau=.25,penalty="ENet",a=seq(0,1,.1))
aicm <- qic.select(rqe, method="AIC")
#BIC is the default method
bicm <- qic.select(rqe)
bicm
coefficients(bicm)
coefficients(bicm)
attributes(bicm)
bicm$modelsInfo
bicm$ic
.1*.9
.5*.5
rqmt <- rq.pen(x,y,tau=seq(.1,.9,.1))
rqmt <- rq.pen(x,y,tau=seq(.1,.9,.1))
rqmt <- rq.pen(x,y,tau=seq(.1,.9,.1))
qic.select
head(qic.select)
dim(x)
head(rq.group.pen)
roxygen2::roxygenise()
roxygen2::roxygenise()
load_all()
tvals <- seq(.1,.9,.1)
rqmt <- rq.pen(x,y,tau=tvals)
#default is to find the optimal value of
# lambda for each quantile seperately
rqmt_st <- qic.select(rqmt)
# alternative option is to find one value of
# lambda best for all tau. Below code
# also provides different weights for the models
rqmt_g <- qic.select(rqmt,septau = FALSE,weights=sqrt(tvals*(1-tvals)))
# first one will have different values of lambda for each quantile
# second approach will provide the same value for lambda for all quantiles
rqmt_st$modelsInfo
rqmt_g$modelsInfo
#below command gets coefficients
coefficients(rqmt)
tvals <- seq(.1,.9,.1)
rqmt <- rq.pen(x,y,tau=tvals)
#default is to find the optimal value of
# lambda for each quantile seperately
rqmt_st <- qic.select(rqmt)
# alternative option is to find one value of
# lambda best for all tau. Below code
# also provides different weights for the models
rqmt_g <- qic.select(rqmt,septau = FALSE,weights=sqrt(tvals*(1-tvals)))
# first one will have different values of lambda for each quantile
# second approach will provide the same value for lambda for all quantiles
rqmt_st$modelsInfo
rqmt_g$modelsInfo
coefficients(rqmt)
rqmt_g
attributes(rqmt_g)
rqmt_st
debug(qic.select)
print.qic.select()
print.qic.select
rqmt_st
coefficients(rqmt_st)
rqmt_g
coefficients(rqmt_g)
#lasso model for 9 quantiles
tvals <- seq(.1,.9,.1)
rqmt <- rq.pen(x,y,tau=tvals)
#default is to find the optimal value of
# lambda for each quantile seperately
rqmt_st <- qic.select(rqmt)
# alternative option is to find one value of
# lambda best for all tau. Below code
# also provides different weights for the models
rqmt_g <- qic.select(rqmt,septau = FALSE,weights=sqrt(tvals*(1-tvals)))
# first one will have different values of lambda for each quantile
# second approach will provide the same value for lambda for all quantiles
rqmt_st$modelsInfo
rqmt_g$modelsInfo
#below command gets coefficients
coefficients(rqmt)
undebug(qic.select)
#lasso model for 9 quantiles
tvals <- seq(.1,.9,.1)
rqmt <- rq.pen(x,y,tau=tvals)
#default is to find the optimal value of
# lambda for each quantile seperately
rqmt_st <- qic.select(rqmt)
# alternative option is to find one value of
# lambda best for all tau. Below code
# also provides different weights for the models
rqmt_g <- qic.select(rqmt,septau = FALSE,weights=sqrt(tvals*(1-tvals)))
# first one will have different values of lambda for each quantile
# second approach will provide the same value for lambda for all quantiles
rqmt_st$modelsInfo
rqmt_g$modelsInfo
#below command gets coefficients
coefficients(rqmt)
rqmt
tvals <- seq(.1,.9,.1)
rqmt <- rq.pen(x,y,tau=tvals)
#default is to find the optimal value of
# lambda for each quantile seperately
rqmt_st <- qic.select(rqmt)
# alternative option is to find one value of
# lambda best for all tau. Below code
# also provides different weights for the models
rqmt_g <- qic.select(rqmt,septau = FALSE,weights=sqrt(tvals*(1-tvals)))
# first one will have different values of lambda for each quantile
# second approach will provide the same value for lambda for all quantiles
rqmt_st$modelsInfo
rqmt_g$modelsInfo
#below command gets coefficients for the selected model optimized for each quantile
coefficients(rqmt_st)
g <- c(rep(1,4),rep(2,3),rep(3,3),rep(4,3))
rgroup <- rq.group.pen(x,y,groups=g,tau=seq(.1,.9.,1))
rqgroup_ic <- qic.select(rqgroup)
head(rq.group.pen)
rgroup <- rq.group.pen(x,y,groups=g,tau=seq(.1,.9.,1))
rq.group.pen(x,y,groups=g)
rq.group.pen(x,y,groups=g,tau=.5)
