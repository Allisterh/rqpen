% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mainFunctions.R
\name{rq.pen}
\alias{rq.pen}
\title{Title}
\usage{
rq.pen(
  x,
  y,
  tau = 0.5,
  lambda = NULL,
  penalty = c("LASSO", "Ridge", "ENet", "aLASSO", "SCAD", "MCP"),
  a = NULL,
  nlambda = 100,
  eps = ifelse(nrow(x) < ncol(x), 0.01, 1e-04),
  penalty.factor = rep(1, ncol(x)),
  alg = ifelse(sum(dim(x)) < 200, "huber", "br"),
  scalex = TRUE,
  tau.penalty.factor = rep(1, length(tau)),
  coef.cutoff = 1e-08,
  max.iter = 10000,
  converge.eps = 1e-07,
  gamma = IQR(y)/10,
  lambda.discard = TRUE,
  ...
)
}
\arguments{
\item{x}{matrix of predictors}

\item{y}{vector of responses}

\item{tau}{vector of quantiles}

\item{lambda}{vector of lambda, if not set will be generated automatically}

\item{penalty}{choice of penalty}

\item{a}{additional tuning parameter, not used for lasso or ridge penalties}

\item{nlambda}{number of lambda, ignored if lambda is set}

\item{eps}{If not pre-specified the lambda vector will be from lambda_max to lambda_max times eps}

\item{penalty.factor}{penalty factor for the predictors}

\item{alg}{algorithm used}

\item{scalex}{Whether x should be scaled before fitting the model. Coefficients are returned on the orginal scale.}

\item{tau.penalty.factor}{A penalty factor for each quantile.}

\item{max.iter}{Maximum number of iterations of non-linear programming algorithms.}

\item{converge.eps}{Convergence threshold for non-linear programming algorithms.}

\item{gamma}{tuning parameter for Huber loss, not applicable for non-huber algorithms.}

\item{coef.cuttoff}{Some of the linear programs will provide very small, but not sparse solutions. Estimates below this number will be set to zero. This is ignored if a non-linear programming algorithm is used.}
}
\value{

}
\description{
Title
}
